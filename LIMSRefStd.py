"""
LIMSRefStd is a Module/File to be used in conjunction with the main executable Module/File, Dwyer Engineering LIMS.
With this module being a standalone and not a part of the Dwyer Engineering LIMS, it can be edited and compiled at will
to add any necessary additions that are deemed to fit the requirements of the laboratory. The primary function of this
module is to access the calibration equipment database stored in an excel file that is generated by track pro on a
regularly scheduled basis, and write the information to arrays for user accessibility during the calibration process
when using the Calibration GUI.

Copyright(c) 2018, Robert Adam Maldonado.
"""

import datetime
import os
import os.path

import LIMSVarConfig
import win32com.client
from tkinter import *
from tkinter import messagebox as tm
from tkinter import ttk


class AppReferenceStandardDatabase:

    # ================================METHODS========================================= #

    def __init__(self):
        pass

    # =====================CALIBRATION EQUIPMENT DATABASE===================== #

    # This function is designed to be called at times when the user is needing to use information provided in the
    # calibration equipment database throughout the calibration process
    def calibration_equipment_database_csv(self):
        global description_width, manufacturer_width, range_width
        self.__init__()

        i = 1
        with open(r'\\BDC5\Dwyer Engineering LIMS\Required Files\Calibration Standards List - 3.txt', 'r') as f:
            for line in f:
                calibration_equipment_information = line.replace("\x00", "").split(';')
                LIMSVarConfig.calibration_equipment_reference_array.append(i)
                LIMSVarConfig.cal_equip_item_no.append(calibration_equipment_information[0])
                LIMSVarConfig.cal_equip_descrip.append(calibration_equipment_information[1])
                LIMSVarConfig.cal_equip_manufact.append(calibration_equipment_information[2])
                LIMSVarConfig.cal_equip_model_no.append(calibration_equipment_information[3])
                LIMSVarConfig.cal_equip_location.append(calibration_equipment_information[6])
                LIMSVarConfig.cal_equip_asset_no.append(calibration_equipment_information[10])
                LIMSVarConfig.cal_equip_cal_interval.append(calibration_equipment_information[11])
                LIMSVarConfig.cal_equip_serial_no.append(calibration_equipment_information[14])
                LIMSVarConfig.cal_equip_range.append(calibration_equipment_information[23])
                LIMSVarConfig.cal_equip_due_date.append(calibration_equipment_information[26])
                LIMSVarConfig.cal_equip_cal_date.append(calibration_equipment_information[28])
                i += 1

        # Width Definition for Calibration Equipment Information
        description_width = max(len(entry) for entry in LIMSVarConfig.cal_equip_descrip)
        manufacturer_width = max(len(entry) for entry in LIMSVarConfig.cal_equip_manufact)
        range_width = max(len(entry) for entry in LIMSVarConfig.cal_equip_range)

    # ----------------------------------------------------------------------- #

    # This command is designed to open up database to Calibration Equipment
    # managed in track pro and output to scrollable window for users to read.
    def calibration_equipment_database_window(self):
        global RefStandardDBase, asset_number_search_val, calibration_asset_number, \
            serial_number_search_val, calibration_serial_number, equipment_description, \
            equipment_manufacturer, equipment_location, calibration_interval, equipment_model_number, \
            equipment_range, last_action_date, equipment_serial_number, equipment_asset_number, \
            equipment_calibration_due_date, btn_past_due_date, btn_coming_up_for_cal

        calibration_asset_number = StringVar()
        calibration_serial_number = StringVar()

        if len(LIMSVarConfig.calibration_equipment_reference_array) is None or \
                len(LIMSVarConfig.calibration_equipment_reference_array) == 0:
            self.calibration_equipment_database_csv()
        else:
            pass

        from LIMSHomeWindow import AppCommonCommands
        from LIMSHomeWindow import AppHomeWindow
        from LIMSHelpWindows import AppHelpWindows
        old_window = AppHomeWindow()
        old_window.home_window_hide()
        acc = AppCommonCommands()
        ahw = AppHelpWindows()

        # ....................Main Window Properties.............................#

        RefStandardDBase = Toplevel()
        RefStandardDBase.title("Calibration Equipment Database")
        RefStandardDBase.iconbitmap("\\\\BDC5\\Dwyer Engineering LIMS\\Required Images\\DwyerLogo.ico")
        width = 1230
        height = 300
        screen_width = RefStandardDBase.winfo_screenwidth()
        screen_height = RefStandardDBase.winfo_screenheight()
        x = (screen_width / 2) - (width / 2)
        y = (screen_height / 2) - (height / 2)
        RefStandardDBase.geometry("%dx%d+%d+%d" % (width, height, x, y))
        RefStandardDBase.focus_force()
        RefStandardDBase.protocol("WM_DELETE_WINDOW", lambda: acc.on_exit(RefStandardDBase))

        # .........................Menu Bar Creation.................................. #

        from LIMSHomeWindow import MenuBar
        menubar = MenuBar(RefStandardDBase, width, height, x, y)
        menubar.add_menu("File", commands=[("Home", lambda: self.clear_labels()),
                                           ("Logout", lambda: acc.software_signout(RefStandardDBase)),
                                           ("Quit", lambda: acc.software_close(RefStandardDBase))])
        menubar.add_menu("Help", commands=[("Help", lambda: ahw.calibration_equipment_database_help())])

        # .........................Frame Creation................................. #

        calibration_equipment_search_frame = LabelFrame(RefStandardDBase,
                                                        text="Calibration Equipment Search (By Asset Number or \
Serial Number)",
                                                        relief=SOLID, bd=1, labelanchor="n")
        calibration_equipment_search_frame.grid(row=0, column=0, rowspan=2, columnspan=6, padx=10, pady=10)

        calibration_equipment_display_frame = LabelFrame(RefStandardDBase,
                                                         text="Calibration Equipment Information",
                                                         relief=SOLID, bd=1, labelanchor="n")
        calibration_equipment_display_frame.grid(row=3, column=0, rowspan=2, columnspan=6, padx=10, pady=10)

        # .....................Labels and Entries................................. #

        # Ask User for Asset Number Input to Search for Calibration Equipment
        lbl_asset_number = ttk.Label(calibration_equipment_search_frame, text="Asset Number:", font=('serif', 10))
        lbl_asset_number.grid(row=0, column=1, padx=5, pady=5)

        asset_number_search_val = ttk.Entry(calibration_equipment_search_frame, textvariable=calibration_asset_number,
                                            width=20, font=6)
        asset_number_search_val.bind("<KeyRelease>", lambda event: acc.all_caps(calibration_asset_number))
        asset_number_search_val.grid(row=0, column=2)
        asset_number_search_val.focus()

        btn_cal_eq_asset_search = ttk.Button(calibration_equipment_search_frame, text="Search by Asset",
                                             width=20, command=lambda: self.calibration_equipment_search_by_asset())
        btn_cal_eq_asset_search.bind("<Return>", lambda event: self.calibration_equipment_search_by_asset())
        btn_cal_eq_asset_search.grid(pady=5, padx=5, row=0, column=3)

        # Ask User for Serial Number Input to Search for Calibration Equipment
        lbl_serial_number = ttk.Label(calibration_equipment_search_frame, text="Serial Number:", font=('serif', 10))
        lbl_serial_number.grid(row=1, column=1, padx=5, pady=5)

        serial_number_search_val = ttk.Entry(calibration_equipment_search_frame, textvariable=calibration_serial_number,
                                             width=20, font=6)
        serial_number_search_val.grid(row=1, column=2)

        btn_cal_eq_serial_search = ttk.Button(calibration_equipment_search_frame, text="Search by Serial",
                                              width=20, command=lambda: self.calibration_equipment_search_by_serial())
        btn_cal_eq_serial_search.bind("<Return>", lambda event: self.calibration_equipment_search_by_serial())
        btn_cal_eq_serial_search.grid(pady=5, padx=5, row=1, column=3)

        # /////////////////////////////////////////////////////////////////////// #
        # The following is information provided by searching (assuming a valid Asset Number or Serial Number
        # has been provided prior to clicking the "Search" button and that a file containing the calibration equipment
        # was actually created and saved in the proper directory)
        # ///////////////////////////////////////////////////////////////////////#

        lbl_description = ttk.Label(calibration_equipment_display_frame, text="Description:",
                                    font=('serif', 10))
        lbl_description.grid(row=0, column=0, padx=5)
        equipment_description = ttk.Label(calibration_equipment_display_frame, width=description_width,
                                          text=LIMSVarConfig.calibration_equip_description, font=10)
        equipment_description.grid(row=0, column=1, columnspan=4, sticky=W)

        lbl_manufacturer = ttk.Label(calibration_equipment_display_frame, text="Manufacturer:",
                                     font=('serif', 10))
        lbl_manufacturer.grid(row=1, column=0, padx=5)
        equipment_manufacturer = ttk.Label(calibration_equipment_display_frame, width=manufacturer_width,
                                           text=LIMSVarConfig.calibration_equip_manufacturer, font=10)
        equipment_manufacturer.grid(row=1, column=1, sticky=W)

        lbl_location = ttk.Label(calibration_equipment_display_frame, text="Location:", font=('arial', 10))
        lbl_location.grid(row=1, column=2)
        equipment_location = ttk.Label(calibration_equipment_display_frame,
                                       text=LIMSVarConfig.calibration_equip_location, font=10)
        equipment_location.grid(row=1, column=3, sticky=W)

        lbl_calibration_interval = ttk.Label(calibration_equipment_display_frame, text="Calibration Interval:",
                                             font=('serif', 10))
        lbl_calibration_interval.grid(row=1, column=4)
        calibration_interval = ttk.Label(calibration_equipment_display_frame, width=20,
                                         text=LIMSVarConfig.calibration_equip_cal_interval, font=10)
        calibration_interval.grid(row=1, column=5, sticky=W)

        lbl_model_number = ttk.Label(calibration_equipment_display_frame, text="Model Number:",
                                     font=('serif', 10))
        lbl_model_number.grid(row=2, column=0, padx=5)
        equipment_model_number = ttk.Label(calibration_equipment_display_frame, width=20,
                                           text=LIMSVarConfig.calibration_equip_model_number, font=10)
        equipment_model_number.grid(row=2, column=1, sticky=W)

        lbl_range = ttk.Label(calibration_equipment_display_frame, text="Device Range:",
                              font=('serif', 10))
        lbl_range.grid(row=2, column=2)
        equipment_range = ttk.Label(calibration_equipment_display_frame, width=range_width,
                                    text=LIMSVarConfig.calibration_equip_range, font=10)
        equipment_range.grid(row=2, column=3, sticky=W)

        lbl_last_action_date = ttk.Label(calibration_equipment_display_frame, text="Last Action Date:",
                                         font=('serif', 10))
        lbl_last_action_date.grid(row=2, column=4)
        last_action_date = ttk.Label(calibration_equipment_display_frame, width=20,
                                     text=LIMSVarConfig.calibration_equip_cal_date, font=10)
        last_action_date.grid(row=2, column=5, sticky=W)

        lbl_display_serial_number = ttk.Label(calibration_equipment_display_frame, text="Serial Number:",
                                              font=('serif', 10))
        lbl_display_serial_number.grid(row=3, column=0, padx=5)
        equipment_serial_number = ttk.Label(calibration_equipment_display_frame, width=20,
                                            text=LIMSVarConfig.calibration_equip_serial_num, font=10)
        equipment_serial_number.grid(row=3, column=1, sticky=W)

        lbl_display_asset_number = ttk.Label(calibration_equipment_display_frame, text="Asset Number:",
                                             font=('serif', 10))
        lbl_display_asset_number.grid(row=3, column=2)
        equipment_asset_number = ttk.Label(calibration_equipment_display_frame, width=20,
                                           text=LIMSVarConfig.calibration_equip_asset_num, font=10)
        equipment_asset_number.grid(row=3, column=3, sticky=W)

        lbl_calibration_due_date = ttk.Label(calibration_equipment_display_frame, text="Due Date:",
                                             font=('serif', 10))
        lbl_calibration_due_date.grid(row=3, column=4)
        equipment_calibration_due_date = ttk.Label(calibration_equipment_display_frame, width=20,
                                                   text=LIMSVarConfig.calibration_equipment_due_date, font=10)
        equipment_calibration_due_date.grid(row=3, column=5, sticky=W)

        # ................Button with Functions for this Window................... #

        btn_back_out_eq_db = ttk.Button(RefStandardDBase, text="Back to Main Menu", width=30,
                                        command=lambda: self.clear_labels())
        btn_back_out_eq_db.bind("<Return>", lambda event: self.clear_labels())
        btn_back_out_eq_db.grid(pady=10, padx=5, row=7, column=0, columnspan=2)

        btn_past_due_date = ttk.Button(RefStandardDBase, text="Generate 'Past Due' Report", width=30,
                                       command=lambda: self.generate_past_due_report())
        btn_past_due_date.bind("<Return>", lambda event: self.generate_past_due_report())
        btn_past_due_date.grid(pady=10, padx=5, row=7, column=2, columnspan=2)

        btn_coming_up_for_cal = ttk.Button(RefStandardDBase, text="Generate 'Up for Calibration' Report", width=35,
                                           command=lambda: self.generate_coming_up_for_cal_report())
        btn_coming_up_for_cal.bind("<Return>", lambda event: self.generate_coming_up_for_cal_report())
        btn_coming_up_for_cal.grid(pady=10, padx=5, row=7, column=4, columnspan=2)

    # ----------------------------------------------------------------------- #

    # Command Designed to Search for Information of Input Calibration Equipment
    def calibration_equipment_search_by_asset(self):
        self.__init__()

        for i in range(0, len(LIMSVarConfig.calibration_equipment_reference_array)):
            if asset_number_search_val.get() != LIMSVarConfig.cal_equip_asset_no[i]:
                i += 1
            else:
                LIMSVarConfig.calibration_equip_description = LIMSVarConfig.cal_equip_descrip[i]
                LIMSVarConfig.calibration_equip_manufacturer = LIMSVarConfig.cal_equip_manufact[i]
                LIMSVarConfig.calibration_equip_location = LIMSVarConfig.cal_equip_location[i]
                LIMSVarConfig.calibration_equip_cal_interval = str(LIMSVarConfig.cal_equip_cal_interval[i]) + " Days"
                LIMSVarConfig.calibration_equip_model_number = LIMSVarConfig.cal_equip_model_no[i]
                LIMSVarConfig.calibration_equip_range = LIMSVarConfig.cal_equip_range[i]
                LIMSVarConfig.calibration_equip_cal_date = LIMSVarConfig.cal_equip_cal_date[i]
                LIMSVarConfig.calibration_equip_serial_num = LIMSVarConfig.cal_equip_serial_no[i]
                LIMSVarConfig.calibration_equipment_due_date = LIMSVarConfig.cal_equip_due_date[i]

        equipment_description.config(text=LIMSVarConfig.calibration_equip_description)
        equipment_manufacturer.config(text=LIMSVarConfig.calibration_equip_manufacturer)
        equipment_location.config(text=LIMSVarConfig.calibration_equip_location)
        calibration_interval.config(text=LIMSVarConfig.calibration_equip_cal_interval)
        equipment_model_number.config(text=LIMSVarConfig.calibration_equip_model_number)
        equipment_range.config(text=LIMSVarConfig.calibration_equip_range)
        last_action_date.config(text=LIMSVarConfig.calibration_equip_cal_date)
        equipment_asset_number.config(text=asset_number_search_val.get())
        equipment_serial_number.config(text=LIMSVarConfig.calibration_equip_serial_num)

        now = datetime.datetime.now()
        todays_date = now.strftime("%m-%d-%Y").replace("-", "/")
        cal_date = LIMSVarConfig.calibration_equipment_due_date

        if datetime.datetime.strptime(cal_date, '%m/%d/%Y') > datetime.datetime.strptime(todays_date, '%m/%d/%Y'):
            equipment_calibration_due_date.config(text=LIMSVarConfig.calibration_equipment_due_date)
            equipment_calibration_due_date.config(background="systemMenu")
        else:
            equipment_calibration_due_date.config(text=LIMSVarConfig.calibration_equipment_due_date)
            equipment_calibration_due_date.config(background="red")
            tm.showerror("Expired Calibration Interval!", "Selected device is outside of its calibration interval!")

    # ----------------------------------------------------------------------- #

    # Command Designed to Search for Information of Input Calibration Equipment
    def calibration_equipment_search_by_serial(self):
        self.__init__()

        for i in range(0, len(LIMSVarConfig.calibration_equipment_reference_array)):
            if serial_number_search_val.get() != LIMSVarConfig.cal_equip_serial_no[i]:
                i += 1
            else:
                LIMSVarConfig.calibration_equip_description = LIMSVarConfig.cal_equip_descrip[i]
                LIMSVarConfig.calibration_equip_manufacturer = LIMSVarConfig.cal_equip_manufact[i]
                LIMSVarConfig.calibration_equip_location = LIMSVarConfig.cal_equip_location[i]
                LIMSVarConfig.calibration_equip_cal_interval = str(LIMSVarConfig.cal_equip_cal_interval[i]) + " Days"
                LIMSVarConfig.calibration_equip_model_number = LIMSVarConfig.cal_equip_model_no[i]
                LIMSVarConfig.calibration_equip_range = LIMSVarConfig.cal_equip_range[i]
                LIMSVarConfig.calibration_equip_cal_date = LIMSVarConfig.cal_equip_cal_date[i]
                LIMSVarConfig.calibration_equip_asset_num = LIMSVarConfig.cal_equip_asset_no[i]
                LIMSVarConfig.calibration_equipment_due_date = LIMSVarConfig.cal_equip_due_date[i]

        equipment_description.config(text=LIMSVarConfig.calibration_equip_description)
        equipment_manufacturer.config(text=LIMSVarConfig.calibration_equip_manufacturer)
        equipment_location.config(text=LIMSVarConfig.calibration_equip_location)
        calibration_interval.config(text=LIMSVarConfig.calibration_equip_cal_interval)
        equipment_model_number.config(text=LIMSVarConfig.calibration_equip_model_number)
        equipment_range.config(text=LIMSVarConfig.calibration_equip_range)
        last_action_date.config(text=LIMSVarConfig.calibration_equip_cal_date)
        equipment_asset_number.config(text=LIMSVarConfig.calibration_equip_asset_num)
        equipment_serial_number.config(text=serial_number_search_val.get())

        now = datetime.datetime.now()
        todays_date = now.strftime("%m-%d-%Y").replace("-", "/")
        cal_date = LIMSVarConfig.calibration_equipment_due_date

        if datetime.datetime.strptime(cal_date, '%m/%d/%Y') > datetime.datetime.strptime(todays_date, '%m/%d/%Y'):
            equipment_calibration_due_date.config(text=LIMSVarConfig.calibration_equipment_due_date)
            equipment_calibration_due_date.config(background="systemMenu")
        else:
            equipment_calibration_due_date.config(text=LIMSVarConfig.calibration_equipment_due_date)
            equipment_calibration_due_date.config(background="red")
            tm.showerror("Expired Calibration Interval!", "Selected device is outside of its calibration interval!")

    # -----------------------------------------------------------------------#

    # Command Designed to Query Which Instruments Located at Michigan City
    # Are Past the Calibration Due Date
    def generate_past_due_report(self):
        self.__init__()

        btn_past_due_date.config(cursor="watch")

        # Initialize Todays Date for Cal Date Comparison
        now = datetime.datetime.now()
        todays_date = now.strftime("%m-%d-%y").replace("-", "/")

        # File Creation
        excel = win32com.client.dynamic.Dispatch("Excel.Application")
        wb = excel.Workbooks.Add()
        ws = wb.Sheets("Sheet1")

        # Header Creation
        ws.Cells(1, 4).Value = "Report Date"
        ws.Cells(1, 5).Value = todays_date
        ws.Cells(2, 1).Value = "Item Number"
        ws.Cells(2, 2).Value = "Description"
        ws.Cells(2, 3).Value = "Manufacturer"
        ws.Cells(2, 4).Value = "Model Number"
        ws.Cells(2, 5).Value = "Location"
        ws.Cells(2, 6).Value = "Asset Number"
        ws.Cells(2, 7).Value = "Serial Number"
        ws.Cells(2, 8).Value = "Last Action Date"
        ws.Cells(2, 9).Value = "Due Date"

        j = 3
        # Adding Content to File
        for i in range(1, len(LIMSVarConfig.calibration_equipment_reference_array)):
            ws.Cells(1, 10).Value = LIMSVarConfig.cal_equip_due_date[i]
            if ws.Cells(1, 5).Value > ws.Cells(1, 10).Value:
                ws.Cells(j, 1).Value = LIMSVarConfig.cal_equip_item_no[i]
                ws.Cells(j, 2).Value = LIMSVarConfig.cal_equip_descrip[i]
                ws.Cells(j, 3).Value = LIMSVarConfig.cal_equip_manufact[i]
                ws.Cells(j, 4).Value = LIMSVarConfig.cal_equip_model_no[i]
                ws.Cells(j, 5).Value = LIMSVarConfig.cal_equip_location[i]
                ws.Cells(j, 6).Value = LIMSVarConfig.cal_equip_asset_no[i]
                ws.Cells(j, 7).Value = LIMSVarConfig.cal_equip_serial_no[i]
                ws.Cells(j, 8).Value = LIMSVarConfig.cal_equip_cal_date[i]
                ws.Cells(j, 9).Value = LIMSVarConfig.cal_equip_due_date[i]
                j += 1
            else:
                i += 1

        ws.Cells(1, 10).Value = ""
        ws.Columns.AutoFit()

        btn_past_due_date.config(cursor="arrow")

        # File Manipulation
        f = '\\\\BDC5\\Dwyer Engineering LIMS\\Calibration Standards Reports\\Past Due Report - ' \
            + todays_date.replace("/", "-") + '.xlsx'
        wb.SaveAs(f)
        wb.Close(True)

        # Open File
        os.startfile(f)

    # -----------------------------------------------------------------------#

    # Command Designed to Query Which Instruments Located at Michigan City
    # Are Approaching Recalibration Date
    def generate_coming_up_for_cal_report(self):
        self.__init__()

        btn_coming_up_for_cal.config(cursor="watch")

        # Initialize Todays Date for Cal Date Comparison
        now = datetime.datetime.now()
        todays_date = now.strftime("%m-%d-%y").replace("-", "/")

        # File Creation
        excel = win32com.client.dynamic.Dispatch("Excel.Application")
        wb = excel.Workbooks.Add()
        ws = wb.Sheets("Sheet1")

        # Header Creation
        ws.Cells(1, 4).Value = "Report Date"
        ws.Cells(1, 5).Value = todays_date
        ws.Cells(2, 1).Value = "Item Number"
        ws.Cells(2, 2).Value = "Description"
        ws.Cells(2, 3).Value = "Manufacturer"
        ws.Cells(2, 4).Value = "Model Number"
        ws.Cells(2, 5).Value = "Location"
        ws.Cells(2, 6).Value = "Asset Number"
        ws.Cells(2, 7).Value = "Serial Number"
        ws.Cells(2, 8).Value = "Last Action Date"
        ws.Cells(2, 9).Value = "Due Date"

        j = 3
        # Adding Content to File
        for i in range(1, len(LIMSVarConfig.calibration_equipment_reference_array)):
            ws.Cells(1, 10).Value = LIMSVarConfig.cal_equip_due_date[i]
            ws.Cells(1, 11).Formula = '=abs(J1-E1)'
            if ws.Cells(1, 11).Value <= 14 and ws.Cells(1, 10).Value > ws.Cells(1, 5).Value:
                ws.Cells(j, 1).Value = LIMSVarConfig.cal_equip_item_no[i]
                ws.Cells(j, 2).Value = LIMSVarConfig.cal_equip_descrip[i]
                ws.Cells(j, 3).Value = LIMSVarConfig.cal_equip_manufact[i]
                ws.Cells(j, 4).Value = LIMSVarConfig.cal_equip_model_no[i]
                ws.Cells(j, 5).Value = LIMSVarConfig.cal_equip_location[i]
                ws.Cells(j, 6).Value = LIMSVarConfig.cal_equip_asset_no[i]
                ws.Cells(j, 7).Value = LIMSVarConfig.cal_equip_serial_no[i]
                ws.Cells(j, 8).Value = LIMSVarConfig.cal_equip_cal_date[i]
                ws.Cells(j, 9).Value = LIMSVarConfig.cal_equip_due_date[i]
                j += 1
            else:
                i += 1

        ws.Cells(1, 10).Value = ""
        ws.Cells(1, 11).Value = ""
        ws.Columns.AutoFit()

        btn_coming_up_for_cal.config(cursor="arrow")

        # File Manipulation
        f = '\\\\BDC5\\Dwyer Engineering LIMS\\Calibration Standards Reports\\Approaching Cal Date - ' \
            + todays_date.replace("/", "-") + '.xlsx'
        wb.SaveAs(f)
        wb.Close(True)

        # Open File
        os.startfile(f)

    # ----------------------------------------------------------------------- #

    # This function is intended to clear all labels on exiting so that re-entering will lead to a clean ui
    def clear_labels(self):
        self.__init__()

        LIMSVarConfig.clear_calibration_equip_variables()

        equipment_description.config(text=LIMSVarConfig.calibration_equip_description)
        equipment_manufacturer.config(text=LIMSVarConfig.calibration_equip_manufacturer)
        equipment_location.config(text=LIMSVarConfig.calibration_equip_location)
        calibration_interval.config(text=LIMSVarConfig.calibration_equip_cal_interval)
        equipment_model_number.config(text=LIMSVarConfig.calibration_equip_model_number)
        equipment_range.config(text=LIMSVarConfig.calibration_equip_range)
        last_action_date.config(text=LIMSVarConfig.calibration_equip_cal_date)
        equipment_asset_number.config(text=LIMSVarConfig.calibration_equip_asset_num)
        equipment_serial_number.config(text=LIMSVarConfig.calibration_equip_serial_num)
        equipment_calibration_due_date.config(text=LIMSVarConfig.calibration_equipment_due_date)

        from LIMSHomeWindow import AppCommonCommands
        acc = AppCommonCommands()
        acc.return_home(RefStandardDBase)
